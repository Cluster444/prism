module Prism
  class LexCompat
    RIPPER: Hash[Symbol, Symbol]

    class Token
      include Enumerable[[Integer, Integer] | Symbol | String | Ripper::Lexer::State]

      def initialize: ([[Integer, Integer], Symbol, String, Ripper::Lexer::State]) -> void

      def location: () -> [Integer, Integer]
      def event: () -> Symbol
      def value: () -> String
      def state: () -> Ripper::Lexer::State

      def []: (0) -> [Integer, Integer]
            | (1) -> Symbol
            | (2) -> String
            | (3) -> Ripper::Lexer::State
            | (Integer) -> ([Integer, Integer] | Symbol | String | Ripper::Lexer::State | nil)
            | (Range[Integer]) -> Array[untyped]

      def each: () -> ::Enumerator[[Integer, Integer] | Symbol | String | Ripper::Lexer::State, self]
              | () { ([Integer, Integer] | Symbol | String | Ripper::Lexer::State) -> void } -> self
    end

    class EndContentToken < Token
      def ==: (untyped other) -> bool
    end

    class IgnoreStateToken < Token
      def ==: (untyped other) -> bool
    end

    class IdentToken < Token
      def ==: (untyped other) -> bool
    end

    class IgnoredNewlineToken < Token
      def ==: (untyped other) -> bool
    end

    class ParamToken < Token
      def ==: (untyped other) -> bool
    end

    module Heredoc
      class PlainHeredoc
        attr_reader tokens: Array[Token]

        def initialize: () -> void
        def <<: (Token) -> void
        def to_a: () -> Array[Token]
      end

      class DashHeredoc
        attr_reader split: bool
        attr_reader tokens: Array[Token]

        def initialize: (bool) -> void
        def <<: (Token) -> void
        def to_a: () -> Array[Token]
      end

      class DedentingHeredoc
        @ended_on_newline: bool

        TAB_WIDTH: Integer

        attr_reader tokens: Array[Token]
        attr_reader dedent_next: bool
        attr_reader dedent: Integer?
        attr_reader embexpr_balance: Integer

        def initialize: () -> void
        def <<: (Token) ->void
        def to_a: () -> Array[Token]?
      end

      def self.build: (Token) -> (DedentingHeredoc | DashHeredoc | PlainHeredoc)
    end

    attr_reader source: String
    attr_reader options: untyped

    def initialize: (String, **untyped) -> void
    def result: () -> ParseResult[Array[Token]]
  end

  class LexRipper
    attr_reader source: String

    def initialize: (String) -> void
    def result: () -> Array[[[Integer, Integer], Symbol, String, Ripper::Lexer::State]]
  end
end
