use RubyVM::InstructionSequence as ISeq # See sig/_shims/ruby_vm.rbs

module Prism
  module Debug
    class ISeq
      attr_reader parts: ISeq::tuple

      def initialize: (ISeq::tuple) -> void
      def type: () -> "YARVInstructionSequence/SimpleDataFormat"
      def local_table: () -> ISeq::locals
      def instructions: () -> Array[untyped]
      def each_child: () { (ISeq) -> void } -> void
    end

    def self.cruby_locals: (String source) -> Array[ISeq::locals]

    AnonymousLocal: Object

    def self.prism_locals: (String source) -> Array[ISeq::locals]
    def self.newlines: (String source) -> Array[Integer]

    # C extension
    def self.named_captures: (String source) -> Array[String]
    def self.memsize: (String source) -> { length: Integer, memsize: Integer, node_count: Integer }
    def self.profile_file: (String filepath) -> nil
    def self.inspect_node: (String source) -> String
  end
end
