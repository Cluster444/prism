
<%- nodes.each do |node| -%>
<%- node.each_comment_line do |line| -%>
#<%= line %>
<%- end -%>
class Prism::<%= node.name -%> < Prism::Node
  <%- node.fields.each do |field| -%>
  sig { returns(<%= field.rbi_class %>) }
  def <%= field.name %>; end

  <%- end -%>
  sig { params(<%= (node.fields.map { |field| "#{field.name}: #{field.rbi_class}" } + ["location: Prism::Location"]).join(", ") %>).void }
  def initialize(<%= (node.fields.map(&:name) + ["location"]).join(", ") %>); end

  sig { params(visitor: Prism::Visitor).void }
  def accept(visitor); end
  <%- if node.newline == false -%>

  def set_newline_flag(newline_marked); end
  <%- elsif node.newline.is_a?(String) -%>

  def set_newline_flag(newline_marked); end
  <%- end -%>

  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(params: T.untyped).returns(Prism::<%= node.name %>) }
  def copy(**params); end

  sig { params(keys: T::Array[Symbol]).returns(T::Hash[Symbol, T.nilable(T.any(Prism::Node, T::Array[Prism::Node], String, Prism::Token, T::Array[Prism::Token], Prism::Location))]) }
  def deconstruct_keys(keys); end
  <%- node.fields.each do |field| -%>
  <%- case field -%>
  <%- when Prism::LocationField -%>
  <%- raise unless field.name.end_with?("_loc") -%>
  <%- next if node.fields.any? { |other| other.name == field.name.delete_suffix("_loc") } -%>

  sig { returns(String) }
  def <%= field.name.delete_suffix("_loc") %>; end
  <%- when Prism::OptionalLocationField -%>
  <%- raise unless field.name.end_with?("_loc") -%>
  <%- next if node.fields.any? { |other| other.name == field.name.delete_suffix("_loc") } -%>

  sig { returns(T.nilable(String)) }
  def <%= field.name.delete_suffix("_loc") %>; end
  <%- when Prism::FlagsField -%>
  <%- flags.find { |flag| flag.name == field.kind }.tap { |flag| raise "Expected to find #{field.kind}" unless flag }.values.each do |value| -%>

  sig { returns(T::Boolean) }
  def <%= value.name.downcase %>?; end
  <%- end -%>
  <%- end -%>
  <%- end -%>

  sig { params(inspector: Prism::NodeInspector).returns(String) }
  def inspect(inspector); end
end

<%- end -%>

<%- flags.each do |flag| -%>
# <%= flag.comment %>
module Prism::<%= flag.name %>
  <%- flag.values.each_with_index do |value, index| -%>
  # <%= value.comment %>
  <%= value.name %> = T.let(1 << <%= index %>, Integer)
  <%- end -%>
end

<%- end -%>

class Prism::Visitor < Prism::BasicVisitor
  <%- nodes.each do |node| -%>
  # Visit a <%= node.name %> node
  sig { params(node: Prism::<%= node.name %>).void }
  def visit_<%= node.human %>(node); end
  <%= "\n" if node != nodes.last -%>
  <%- end -%>
end

module Prism::DSL
  private

  # Create a new Location object
  sig { params(source: T.nilable(Source), start_offset: Integer, length: Integer).returns(Prism::Location) }
  def Location(source, start_offset, length); end

  <%- nodes.each do |node| -%>
  # Create a new <%= node.name %> node
  sig { params(<%= (node.fields.map { |field| "#{field.name}: #{field.rbi_class}" } + ["location: Prism::Location"]).join(", ") %>).returns(Prism::<%= node.name %>) }
  def <%= node.name %>(<%= (node.fields.map(&:name) + ["location"]).join(", ") %>); end
  <%- end -%>
end
