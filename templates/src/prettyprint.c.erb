#include "prism/defines.h"

#include <stdio.h>

#include "prism/ast.h"
#include "prism/parser.h"
#include "prism/util/pm_buffer.h"

static void
prettyprint_node(pm_buffer_t *output_buffer, pm_parser_t *parser, pm_node_t *node, pm_buffer_t *prefix_buffer);

static void
prettyprint_location(pm_buffer_t *output_buffer, pm_parser_t *parser, pm_location_t *location) {
    char printed[] = "[0000-0000]";
    snprintf(printed, sizeof(printed), "[%04ld-%04ld]", (long int) (location->start - parser->start), (long int) (location->end - parser->start));
    pm_buffer_append_string(output_buffer, printed, strlen(printed));
}

static void
prettyprint_node(pm_buffer_t *output_buffer, pm_parser_t *parser, pm_node_t *node, pm_buffer_t *prefix_buffer) {
    switch (PM_NODE_TYPE(node)) {
        case PM_SCOPE_NODE:
            // We do not need to print a ScopeNode as it's not part of the AST.
            return;
        <%- nodes.each do |node| -%>
        case <%= node.type %>: {
            <%- if node.fields.any? { |field| !field.is_a?(Prism::FlagsField) } -%>
            pm_<%= node.human %>_t *cast = (pm_<%= node.human %>_t *) node;
            <%- end -%>
            pm_buffer_append_string(output_buffer, "@ <%= node.name %> (location: ()-())\n", <%= node.name.length + 21 %>);
            <%- node.fields.each_with_index do |field, index| -%>
            <%- pointer, preadd = index == node.fields.length - 1 ? ["└── ", "    "] : ["├── ", "│   "] -%>

            // <%= field.name %>
            {
                pm_buffer_concat(output_buffer, prefix_buffer);
                pm_buffer_append_string(output_buffer, "<%= pointer %><%= field.name %>:", <%= pointer.bytesize + field.name.length + 1 %>);
            <%- case field -%>
            <%- when Prism::NodeField -%>
                pm_buffer_append_byte(output_buffer, '\n');

                size_t prefix_length = prefix_buffer->length;
                pm_buffer_append_string(prefix_buffer, "<%= preadd %>", <%= preadd.bytesize %>);
                pm_buffer_concat(output_buffer, prefix_buffer);
                prettyprint_node(output_buffer, parser, (pm_node_t *) cast-><%= field.name %>, prefix_buffer);
                prefix_buffer->length = prefix_length;
            <%- when Prism::OptionalNodeField -%>
                if (cast-><%= field.name %> == NULL) {
                    pm_buffer_append_string(output_buffer, " ∅\n", 5);
                } else {
                    pm_buffer_append_byte(output_buffer, '\n');

                    size_t prefix_length = prefix_buffer->length;
                    pm_buffer_append_string(prefix_buffer, "<%= preadd %>", <%= preadd.bytesize %>);
                    pm_buffer_concat(output_buffer, prefix_buffer);
                    prettyprint_node(output_buffer, parser, (pm_node_t *) cast-><%= field.name %>, prefix_buffer);
                    prefix_buffer->length = prefix_length;
                }
            <%- when Prism::StringField -%>
                pm_buffer_append_string(output_buffer, " \"", 2);
                pm_buffer_append_bytes(output_buffer, pm_string_source(&cast-><%= field.name %>), pm_string_length(&cast-><%= field.name %>));
                pm_buffer_append_string(output_buffer, "\"\n", 2);
            <%- when Prism::NodeListField -%>
                pm_buffer_append_string(output_buffer, " (length: )\n", 13);
                size_t last_index = cast-><%= field.name %>.size - 1;
                for (uint32_t index = 0; index <= last_index; index++) {
                    size_t prefix_length = prefix_buffer->length;
                    pm_buffer_append_string(prefix_buffer, "    ", 4);
                    pm_buffer_concat(output_buffer, prefix_buffer);

                    if (index == last_index) {
                        pm_buffer_append_string(output_buffer, "└── ", 10);
                        pm_buffer_append_string(prefix_buffer, "    ", 4);
                    } else {
                        pm_buffer_append_string(output_buffer, "├── ", 10);
                        pm_buffer_append_string(prefix_buffer, "│   ", 6);
                    }

                    prettyprint_node(output_buffer, parser, (pm_node_t *) cast-><%= field.name %>.nodes[index], prefix_buffer);
                    prefix_buffer->length = prefix_length;
                }
                pm_buffer_append_string(output_buffer, "\n", 1);
            <%- when Prism::ConstantField -%>
                char <%= field.name %>_buffer[12];
                snprintf(<%= field.name %>_buffer, sizeof(<%= field.name %>_buffer), "%u", cast-><%= field.name %>);
                pm_buffer_append_byte(output_buffer, ' ');
                pm_buffer_append_string(output_buffer, <%= field.name %>_buffer, strlen(<%= field.name %>_buffer));
                pm_buffer_append_byte(output_buffer, '\n');
            <%- when Prism::OptionalConstantField -%>
                if (cast-><%= field.name %> == 0) {
                    pm_buffer_append_string(output_buffer, " ∅\n", 5);
                } else {
                    char <%= field.name %>_buffer[12];
                    snprintf(<%= field.name %>_buffer, sizeof(<%= field.name %>_buffer), "%u", cast-><%= field.name %>);
                    pm_buffer_append_byte(output_buffer, ' ');
                    pm_buffer_append_string(output_buffer, <%= field.name %>_buffer, strlen(<%= field.name %>_buffer));
                    pm_buffer_append_byte(output_buffer, '\n');
                }
            <%- when Prism::ConstantListField -%>
                pm_buffer_append_string(output_buffer, " [", 2);
                for (uint32_t index = 0; index < cast-><%= field.name %>.size; index++) {
                    if (index != 0) pm_buffer_append_string(output_buffer, ", ", 2);
                    char <%= field.name %>_buffer[12];
                    snprintf(<%= field.name %>_buffer, sizeof(<%= field.name %>_buffer), "%u", cast-><%= field.name %>.ids[index]);
                    pm_buffer_append_string(output_buffer, <%= field.name %>_buffer, strlen(<%= field.name %>_buffer));
                }
                pm_buffer_append_string(output_buffer, "]\n", 2);
            <%- when Prism::LocationField -%>
                pm_buffer_append_byte(output_buffer, ' ');
                prettyprint_location(output_buffer, parser, &cast-><%= field.name %>);
                pm_buffer_append_byte(output_buffer, '\n');
            <%- when Prism::OptionalLocationField -%>
                if (cast-><%= field.name %>.start == NULL) {
                    pm_buffer_append_string(output_buffer, " ∅\n", 5);
                } else {
                    pm_buffer_append_byte(output_buffer, ' ');
                    prettyprint_location(output_buffer, parser, &cast-><%= field.name %>);
                    pm_buffer_append_byte(output_buffer, '\n');
                }
            <%- when Prism::UInt32Field -%>
                char <%= field.name %>_buffer[12];
                snprintf(<%= field.name %>_buffer, sizeof(<%= field.name %>_buffer), "+%d", cast-><%= field.name %>);
                pm_buffer_append_byte(output_buffer, ' ');
                pm_buffer_append_string(output_buffer, <%= field.name %>_buffer, strlen(<%= field.name %>_buffer));
                pm_buffer_append_byte(output_buffer, '\n');
            <%- when Prism::FlagsField -%>
                char <%= field.name %>_buffer[12];
                snprintf(<%= field.name %>_buffer, sizeof(<%= field.name %>_buffer), "+%d", (uint32_t)(node->flags & ~PM_NODE_FLAG_COMMON_MASK));
                pm_buffer_append_byte(output_buffer, ' ');
                pm_buffer_append_string(output_buffer, <%= field.name %>_buffer, strlen(<%= field.name %>_buffer));
                pm_buffer_append_byte(output_buffer, '\n');
            <%- else -%>
            <%- raise -%>
            <%- end -%>
            }
            <%- end -%>

            break;
        }
        <%- end -%>
    }
}

void
pm_print_node(pm_parser_t *parser, pm_node_t *node) {
    pm_buffer_t output_buffer = { 0 };
    pm_buffer_t prefix_buffer = { 0 };

    prettyprint_node(&output_buffer, parser, node, &prefix_buffer);
    printf("%.*s\n", (int) output_buffer.length, output_buffer.value);

    pm_buffer_free(&output_buffer);
    pm_buffer_free(&prefix_buffer);
}

// Pretty-prints the AST represented by the given node to the given buffer.
PRISM_EXPORTED_FUNCTION void
pm_prettyprint(pm_parser_t *parser, pm_node_t *node, pm_buffer_t *output_buffer) {
    pm_buffer_t prefix_buffer = { 0 };
    prettyprint_node(output_buffer, parser, node, &prefix_buffer);
    pm_buffer_free(&prefix_buffer);
}
