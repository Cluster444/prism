<%- require "ripper" -%>
module Prism
  class RipperCompat < Visitor
    class SexpBuilder < RipperCompat
      private

      <%- Ripper::PARSER_EVENTS.each do |event| -%>
      def on_<%= event %>: (*untyped) -> Array[untyped]
      <%- end -%>

      <%- Ripper::SCANNER_EVENTS.each do |event| -%>
      def on_<%= event %>: (untyped) -> [<%= :"@#{event}".inspect %>, untyped, [Integer, Integer]]
      <%- end -%>
    end

    class SexpBuilderPP < SexpBuilder
      private

      def _dispatch_event_new: () -> Array[untyped]
      def _dispatch_event_push: (Array[untyped], untyped) -> Array[untyped]

      <%- Ripper::PARSER_EVENT_TABLE.each do |event, arity| -%>
      <%- if event =~ /_new\z/ -%>
      alias on_<%= event %> _dispatch_event_new
      <%- elsif event =~ /_add\z/ -%>
      alias on_<%= event %> _dispatch_event_push
      <%- end -%>
      <%- end -%>
    end

    private

    @result: ParseResult[ProgramNode] | nil

    def bounds: (Location) -> untyped
    def result: () -> ParseResult[ProgramNode]

    def _dispatch0: () -> void
    def _dispatch1: (untyped) -> void
    def _dispatch2: (untyped, untyped) -> void
    def _dispatch3: (untyped, untyped, untyped) -> void
    def _dispatch4: (untyped, untyped, untyped, untyped) -> void
    def _dispatch5: (untyped, untyped, untyped, untyped, untyped) -> void
    def _dispatch7: (untyped, untyped, untyped, untyped, untyped, untyped, untyped) -> void

    <%- (Ripper::SCANNER_EVENT_TABLE.merge(Ripper::PARSER_EVENT_TABLE)).each do |event, arity| -%>
    alias on_<%= event %> _dispatch<%= arity %>
    <%- end -%>
  end
end
