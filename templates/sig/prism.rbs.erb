module Prism
  BACKEND: :CEXT | :FFI
  VERSION: String

  # Methods taking a Ruby source code string:
  <%-
    {
      parse: "ParseResult[ProgramNode]",
      lex: "ParseResult[Array[[Token, Integer]]]",
      lex_compat: "ParseResult[Array[[[Integer, Integer], Symbol, String, untyped]]]",
      parse_lex: "ParseResult[[ProgramNode, Array[[Token, Integer]]]]",
      dump: "String",
      parse_comments: "Array[comment]",
      parse_success?: "bool",
      parse_failure?: "bool",
    }.each do |method, return_type|
  -%>

  def self.<%= method %>: (
    String source,
    ?filepath: String,
    ?line: Integer,
    ?encoding: Encoding,
    ?frozen_string_literal: bool,
    ?verbose: bool,
    ?scopes: Array[Array[Symbol]]
  ) -> <%= return_type %>
  <%- end -%>

  def self.load: (
    String source,
    String serialized
  ) -> ParseResult[ProgramNode]

  def self.lex_ripper: (
    String source
  ) -> Array[[[Integer, Integer], Symbol, String, untyped]]


  # Methods taking a path to a Ruby file:
  <%-
    {
      parse_file: "ParseResult[ProgramNode]",
      lex_file: "ParseResult[Array[[Token, Integer]]]",
      parse_lex_file: "ParseResult[[ProgramNode, Array[[Token, Integer]]]]",
      dump_file: "String",
      parse_file_comments: "Array[comment]",
      parse_file_success?: "bool",
      parse_file_failure?: "bool",
    }.each do |method, return_type|
  -%>

  def self.<%= method %>: (
    String filepath,
    ?line: Integer,
    ?encoding: Encoding,
    ?frozen_string_literal: bool,
    ?verbose: bool,
    ?scopes: Array[Array[Symbol]]
  ) -> <%= return_type %>
  <%- end -%>
end
